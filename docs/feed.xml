<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.achowdhary.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.achowdhary.com/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2022-11-10T04:34:06+05:30</updated><id>https://www.achowdhary.com/feed.xml</id><title type="html">Anuradha Chowdhary</title><subtitle>Anuradha Chowdhary is a Data Engineer, Computer Programmer, entreprenuer and promoter of Women in Tech and Open Source Software.  for her work see  &lt;a href=&quot;https://github.com/anu2602&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@github&lt;/a&gt;.</subtitle><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><entry><title type="html">Writing Airflow Plugin</title><link href="https://www.achowdhary.com/writing-airflow-plugin/" rel="alternate" type="text/html" title="Writing Airflow Plugin" /><published>2022-11-07T16:50:47+05:30</published><updated>2022-11-07T16:50:47+05:30</updated><id>https://www.achowdhary.com/writing-airflow-plugin</id><content type="html" xml:base="https://www.achowdhary.com/writing-airflow-plugin/">&lt;figure&gt;
&lt;img src=&quot;plugin.jpg&quot; alt=&quot;plugin&quot; /&gt;
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
	Photo by &lt;a href=&quot;https://unsplash.com/@purzlbaum&quot; style=&quot;color: grey !important;&quot; target=&quot;_blank&quot;&gt;Claudio Schwarz
&lt;/a&gt; 
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I recently pulished &lt;a href=&quot;https://github.com/anu2602/aerofoil&quot;&gt;Aerofoil&lt;/a&gt;, an Airflow Plugin. In the process, I reallized there isn’t a good Guide on writing Airflow Pluins, so here is I am writing a simple, practical and hopefully useful guide.&lt;/p&gt;

&lt;h3 id=&quot;airflow-plugins&quot;&gt;Airflow Plugins&lt;/h3&gt;
&lt;p&gt;Airflow has a simple plugin manager built-in that can integrate external features to its core by either dropping files in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$AIRFLOW_HOME/plugins&lt;/code&gt; folder or installing python modulues that implement plugin’s interface. Pluings are useful for extending and customizing Airflow as per the needs. Plugin can be used for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating new Operatos, Sensors, Hooks&lt;/li&gt;
  &lt;li&gt;Creating macros&lt;/li&gt;
  &lt;li&gt;Modifying Airflow UI&lt;/li&gt;
  &lt;li&gt;Custom timetables&lt;/li&gt;
  &lt;li&gt;Event Listeners&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-write-airflow-plugin&quot;&gt;Why Write Airflow Plugin?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;To provide connectivity to your data product: You provide a data service and chances are your customers are using Airflow to connect to your system. They all are writing same code, instead if you could provide a pluin, that can make life easy for them.&lt;/li&gt;
  &lt;li&gt;To customize your Airflow Installation: You may want to add Menu Links, change UI for your Airflow installation e.g you want to provide link to your documentation from Airflow or you want build add a simple data exploration capability.&lt;/li&gt;
  &lt;li&gt;To add custom or customized Operator/Hooks/Sensors: Though there are provider packages for almost any meaningful system you want to connect via Airflow, you may sometime need to write your own operator or modify operator.&lt;/li&gt;
  &lt;li&gt;and so on ..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugin-packaging&quot;&gt;Plugin Packaging&lt;/h3&gt;
&lt;p&gt;There are two simple way to package plugin. First is simply dropping files into Airflow  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; folder. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; Folder is defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow.cfg&lt;/code&gt;, airflow loads the code in this folder. This is simplest way of writing plugin, and if you are doing this you can probably skip this guide and user Airflow documentation. This guide is more suited to someone who intend to publish a reusable plugin.&lt;/p&gt;

&lt;h3 id=&quot;plugin-src-structure&quot;&gt;Plugin src structure:&lt;/h3&gt;
&lt;p&gt;I recommend following structure for your plugin:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/
  &amp;lt;mymodule&amp;gt;/
  operators (optional)
  sensors (optional)
  views (optional)
  static (optional)
  templates (optional)
  __init__.py
  &amp;lt;myplugin&amp;gt;.py  
setup.py
README.md
MANIFEST.in
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;development-environment&quot;&gt;Development Environment&lt;/h3&gt;
&lt;p&gt;First of all you need to have a running Airflow in your development environment in order for you to be able to test, which is fairly straight forward. After that you make want to find  your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; folder in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow.cfg&lt;/code&gt;, this is usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$AIRFLOW_HOM/plugins&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To be able to test, I recommend you create a symlink to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;mymodule&amp;gt;&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $AIRFLOW_HOME/plugins
ln -s /path/to/plugin-code/src/&amp;lt;mymodule&amp;gt; . 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload_on_plugin_change&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[webserver]&lt;/code&gt; section of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow.cfg&lt;/code&gt;. This is specially helpful if you are developing new UI features and you want to preview your changes without restarting webservers. Take it with a pinch of salt, as some of the changes in the template do not reflect and you need to restart your webserver.&lt;/p&gt;

&lt;h3 id=&quot;entry-point&quot;&gt;Entry Point&lt;/h3&gt;
&lt;p&gt;Entry point to the plugin is the plugin file. The file should define a class exending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow.plugins_manager.AirflowPlugin&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from airflow.plugins_manager import AirflowPlugin

from flask import Blueprint
from flask_appbuilder import expose, BaseView as AppBuilderBaseView
from airflow.hooks.base import BaseHook

#Import your custome classes
from &amp;lt;mymodule&amp;gt;.operators import MyHook
rom &amp;lt;mymodule&amp;gt;.views import MyView

def my_macro():
    pass

my_view = MyView()

my_bp = Blueprint(
	'my_plugin', __name__,
	 template_folder='templates',
	 static_folder='&amp;lt;mymodule&amp;gt;/static',
	 static_url_path='/static/&amp;lt;myurlplath&amp;gt;'
)

my_pkg = {
	'name' : 'My View',
	'category' : 'My New Menu',
	'view': my_view
}

my_mitem = {
    &quot;name&quot;: &quot;Google&quot;,
    &quot;href&quot;: &quot;https://www.google.com&quot;,
    &quot;category&quot;: &quot;My New Menu'&quot;,
}

class MyAirflowPlugin(AirflowPlugin):
    name = &quot;my_plugin&quot;
    hooks = [MyHook]
    macros = [my_macro]
    flask_blueprints = [my_bp]
    appbuilder_views = [my_pkg]
    appbuilder_menu_items = [my_mitem]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;understanding-the-plugin-interface&quot;&gt;Understanding the Plugin Interface&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from airflow.plugins_manager import AirflowPlugin&lt;/code&gt;
Airflow plugin needs to extend the AirflowPlugin class as displayed above and below items needs to be defined in your subclass as per your need.&lt;/p&gt;

&lt;div class=&quot;datatable-begin&quot;&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Plugin Property&lt;/th&gt;
      &lt;th&gt;Usage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;This is the name of your Plugin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hooks&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;List of your custom Hook classes go here&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macro&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;A macro can be defined as a function, list of macros go here&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flask_blueprints&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;A list of &lt;a href=&quot;https://stackoverflow.com/questions/24420857/what-are-flask-blueprints-exactly&quot; target=&quot;_blank&quot;&gt;blueprints&lt;/a&gt; created for Flask, usually you will have only one.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appbuilder_views&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;These are Menu Items for your view (UI Screens). You can either add to existing Menu Group (Category) or create a new one.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appbuilder_menu_items&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Additional external links to be added to Airflow Menu&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;datatable-end&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;entry-point-1&quot;&gt;Entry Point&lt;/h4&gt;
&lt;p&gt;Class implementing plugin interface is the entrypoint for your plugin. If you drop your pluggin into the Airflow’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugins&lt;/code&gt; folder, creating a AirflowPlugin implmentation and keeping is sufficient. But if you are creating a python package and plugin is loaded via setuptools entrypoint mechanism. In your setup.py configure entrypoint as mentioned below:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;entry_points={
        'apache_airflow_provider': [
            'provider_info=&amp;lt;mymoduler&amp;gt;.__init__:get_provider_info'
        ],
        'airflow.plugins': [
            'aerofoil=&amp;lt;mymodule&amp;gt;.my_plugin:MyPlugin'
        ]
    },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where MyPlugin is implemenation of AirflowPlugin as defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mymodule/my_plugin.py&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/stable/plugins.html&quot; target=&quot;_blank&quot;&gt;Airflow Plugin Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/anu2602/aerofoil&quot; target=&quot;_blank&quot;&gt;Aerofoil code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/airflow-plugins&quot; target=&quot;_blank&quot;&gt;Airflow Plugins in Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/24420857/what-are-flask-blueprints-exactly&quot; target=&quot;_blank&quot;&gt;What is Flask Blueprint&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://flask-appbuilder.readthedocs.io/en/latest/config.html&quot; target=&quot;_blank&quot;&gt;Flask-AppBuilder configuration reference&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="Airflow" /><category term="Guide" /><category term="HowTo" /><summary type="html">Photo by Claudio Schwarz</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/wirting-airflow-plugin/plugin.jpeg" /><media:content medium="image" url="https://www.achowdhary.com/wirting-airflow-plugin/plugin.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Annouuncing Aerofoil - An Airflow Plugin</title><link href="https://www.achowdhary.com/announcing-aerofoil/" rel="alternate" type="text/html" title="Annouuncing Aerofoil - An Airflow Plugin" /><published>2022-11-03T11:35:42+05:30</published><updated>2022-11-03T11:35:42+05:30</updated><id>https://www.achowdhary.com/announcing-aerofoil</id><content type="html" xml:base="https://www.achowdhary.com/announcing-aerofoil/">&lt;figure&gt;
&lt;img src=&quot;aerofoil.svg&quot; alt=&quot;confused&quot; /&gt;
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
	Aerofoil improving Airflow, to create a better airflift. 
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I have been working on Airflow for quite some time now and on feature there were few features that I found desperately wanting in my installation without paying. When I looked at Airflow Product Backlog or Airflow Improvment Proposals (AIP) &lt;a href=&quot;https://cwiki.apache.org/confluence/display/AIRFLOW/Airflow+Improvement+Proposals&quot;&gt;log&lt;/a&gt;, I didn’t see these feature in any proirity and understandably so. There is so much to do in core Airflow and it is all very exciting. So I decided to create  a pluging that will contain features, that are not core to Airflow, but supports it and help improve the efficiency.&lt;/p&gt;

&lt;p&gt;Although  &lt;a href=&quot;https://airflow.apache.org/docs/apache-airflow/stable/plugins.html&quot;&gt;poorly documented&lt;/a&gt;, Airflow has a farily good plugin Architecture. So the what does is &lt;a href=&quot;https://github.com/anu2602/aerofoil&quot;&gt;Aerofoil&lt;/a&gt; do? Well the name is reflection of vision for plugin. I am hoping that over next couple of year, it will have many side feature that doesn’t make sense as part of Airflow Core but none the less provides multifild efficiency gains. The plugin is available with &lt;a href=&quot;https://github.com/anu2602/aerofoil/blob/master/LICENSE.md&quot;&gt;MIT license&lt;/a&gt;, the intention is to keep it simple and friendly.&lt;/p&gt;

&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;

&lt;h5 id=&quot;aerofoil-menu&quot;&gt;Aerofoil Menu&lt;/h5&gt;
&lt;p&gt;The first thing you will notice, provbably will be a new Aerofoil menu  in your Airflow UI. 
&lt;img src=&quot;screenshots/menu.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;backfill-ui&quot;&gt;Backfill UI:&lt;/h5&gt;
&lt;p&gt;A convenient way to run Backfill DAG from UI. In most of the enterprise setup, DAG developers do not have access to Airflow servers to be able to run backfill jobs. This makes running backfill an expensive operation. With the Backfilll UI, Airflow users can submit backfill command from UI. The backfill itself runs as a Airflow DAG and is compatible with most production Airflow configurations. This is also the most used feature in Aerofoil.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;screenshots/backfill.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;reset-dag-history&quot;&gt;Reset DAG History&lt;/h5&gt;
&lt;p&gt;Sometime complete DAG history needs to be reset. There is currently no way of clearing a DAGs history in Airflow. This functionality allows clearing/resetting DAGs history via a convenient UI.&lt;br /&gt;
&lt;img src=&quot;screenshots/reset.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;fake-sucess&quot;&gt;Fake Sucess&lt;/h5&gt;
&lt;p&gt;A shortcut to mark your DAG/Task runs successful. The Fake success is a powerful featurs, and to avoid misuse and Audit Trail is maintained. Adminstratos can always find out, who is trying to fake it. 
&lt;img src=&quot;screenshots/fake_success.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;my-dags&quot;&gt;My DAGs&lt;/h5&gt;
&lt;p&gt;Large Airflow installations can have hundreds of DAGs. This feature allows logged in user to view to see the DAG’s authored by her/him. The DAG Author must be set correctly in the DAG file and it must match with the Airflow user name.&lt;/p&gt;

&lt;h5 id=&quot;aerofoilbashoperator&quot;&gt;AerofoilBashOperator:&lt;/h5&gt;
&lt;p&gt;Context aware BashOperator, that can take a context and pass it to callback e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_success_callback&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on_failure_callback&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2 id=&quot;contribute&quot;&gt;Contribute:&lt;/h2&gt;
&lt;p&gt;If you find something missing and would like to contrinute, feel free to raise a pull request. If you find a bug and would like me to fix it, please feel free to raise an issue. I look forward to work with some amazing contributors and learn from you.&lt;/p&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="Airflow" /><category term="Aerofoil" /><summary type="html">Aerofoil improving Airflow, to create a better airflift.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/announcing-airflow/aerofoil.svg" /><media:content medium="image" url="https://www.achowdhary.com/announcing-airflow/aerofoil.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Practical Lean Architecture</title><link href="https://www.achowdhary.com/practical-lean-architecture/" rel="alternate" type="text/html" title="Practical Lean Architecture" /><published>2022-06-11T09:33:15+05:30</published><updated>2022-06-11T09:33:15+05:30</updated><id>https://www.achowdhary.com/practical-lean-architecture</id><content type="html" xml:base="https://www.achowdhary.com/practical-lean-architecture/">&lt;figure&gt;
	&lt;img src=&quot;pisa.jpg&quot; alt=&quot;Leaning Tower&quot; /&gt; 
	&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
		Photo by &lt;a href=&quot;https://unsplash.com/@spantax&quot; style=&quot;color: grey !important;&quot; target=&quot;_blank&quot;&gt;Marco Ceschi&lt;/a&gt; 
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Every software team now use Agile Software Development to some degree, Waterfall development is almost extinct. But the tension between software architecture and agile method remains. There is tensions between spending too little time designing an up-front architecture, increasing risk, and spending too much time, negatively impacting of the delivery of value to the customer. Despite various theoretical proposal confusion and tension exists in most of the teams with respect to Architecture. If you do &lt;a href=&quot;https://www.google.com/search?q=lean+architecture&quot; target=&quot;_blank&quot;&gt;Google Search for Lean Architecture&lt;/a&gt;, content in all the links is rather abstract and confusing.&lt;/p&gt;

&lt;p&gt;Lean and Architecture seems contradictory. Developers sometime mistake agile for absense of architecture. Architecture is a conceptual model of a system and it can not be ignored. Altough the process and people and tools involved in Architecture process are different in Agile but the Software Architecure remains essential for good system. Having said that we can’t have Ivory Tower Architecture rather we need to have requirment based architecture and the process will differ from team to team, but underlying philosophy of “Value Creation, Waste Reduction and Rapid Feedback” must be followed in Architecture proces.&lt;/p&gt;

&lt;p&gt;Let’s take a step back to understand  the word “Architecture”, when we understand the essesnce of Architecure, we may be able to define lean methods. Software architecutre has it’s roots in the physical Architecture. Roman Architecture was defined by three qualities:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Utilitas&lt;/strong&gt; (It must provide utility)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Firmitas:&lt;/strong&gt; (It must be durable)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Venustas:&lt;/strong&gt; (It must inspire human senses)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets’s also have a look at lean principals:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Eliminate waste&lt;/li&gt;
  &lt;li&gt;Amplify learning&lt;/li&gt;
  &lt;li&gt;Decide as late as possible&lt;/li&gt;
  &lt;li&gt;Deliver as fast as possible&lt;/li&gt;
  &lt;li&gt;Empower the team&lt;/li&gt;
  &lt;li&gt;Build integrity in&lt;/li&gt;
  &lt;li&gt;Optimize the whole&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We must also review the &lt;a href=&quot;https://agilemanifesto.org/principles.html&quot; target=&quot;_blank&quot;&gt;Agile Manifesto&lt;/a&gt; before going further. It is very clear that above three are not disjoing sets, they do have an intersection and a rather large one. Lean Architecture is hard, it requires balance and there is silver bullet to get to the answer.But this intersecion may be starting point for understanding lean architecutre. If your design is lean, it produces an architecuture that can help be more agile. Let’s try and understand Lean Architecture, through set of questions:&lt;/p&gt;

&lt;h2 id=&quot;who-is-involved&quot;&gt;Who is involved?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In lean architecture, we lean towards people aspect of architecture a lot more than traditional software architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We must realzie that Architecure is not just about system, it is about people and it is more about people than about system. One of the cornerstone of lean architecture is “All Hands on Deck”. The traditional architecutre was done in isolation by Architects in isolation, lean architecture involves all stakeholders from the word go. Here are the key stakeholdes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;End User of System&lt;/li&gt;
  &lt;li&gt;Business &amp;amp; Domain Experts&lt;/li&gt;
  &lt;li&gt;Developers &amp;amp; Testers&lt;/li&gt;
  &lt;li&gt;IT and Support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also the decisions are not taken by Architects but architect facilitates the decision therough her/his knowlege and influence. They build bridges between different teams and empower developers make technology choices, Empower users to unlock expectations etc. They also need to put constraint on each category of user to be able to express clearly and concisely.&lt;/p&gt;

&lt;h2 id=&quot;who-is-responsible-for-architecture&quot;&gt;Who is Responsible for Architecture?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;The best architectures, requirements, and designs emerge from self-organizing teams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As mentioned in Agile Manifesto, decisions are made by the the team collectivly and it would be naive to assume that the team will always be in agreement. Someone needs to lead/facilitate the team with regards to the evolution of the architecture. There is a need for Architecture owners. Very often the person in the role of team lead is also the architecture owner. This isn’t always the case, particularly at scale, but it is very common for smaller agile teams. This person would need to have both the skills of an AO as well as a team lead to be successful doing so. More complex teams would have dedicated architecture owners. Here are responsibilities of Architure ownwers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Facilitate creation of the architecture, not create and enforce it.&lt;/li&gt;
  &lt;li&gt;Coach other team members in architecture skills and thinking.&lt;/li&gt;
  &lt;li&gt;Advise the product owner in technical priorities.&lt;/li&gt;
  &lt;li&gt;Build architectural spikes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-scope-of-architecture&quot;&gt;What is the scope of Architecture?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Just Barely Good Enough Is Actually The Most Effective Architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every system has an architecture and every reasonable system needs an architecure. The process may differ, people involved may be more and role of architect might be different but that does not change the need for a sound architecture. The architecture must be based on requirment. This may sound obvious, but it is first step in wasting architectural waste. Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change. Here are some guiding principle to define scope:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Architecture is about form, not structure&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Architecture is expression, not abstraction&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Architecture should define what system does and no more&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Architecture should provide a consistent system view, inconsistency increases waste. Scope of architecture is same as in traditional systems minus waste. Architecure is a continious process and some decisions are made just in time, this often requires fundamental change in mindset and team culture. Some high-level architectural modeling is doen early in the lifecycle to foster a common  technical strategy within the team and critical stakeholders. The goal at this point is to identify an architectural strategy, not write mounds of documentation.&lt;/p&gt;

&lt;h2 id=&quot;where-do-you-get-started&quot;&gt;Where do you get started?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Problem definition is a clearly written statement of the problem. This clearly must be first step towards solving it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we lay our route to destination, we shold know our desination. We must start with a clear problem definition. There is no surprise here, like any other software development process you start by modelling the problem. This is the foundation of the architecture. If we don’t have a problem, why waste any resources? The problem modelling gives a sense of purpose and acts a guide to future decisions.&lt;/p&gt;

&lt;p&gt;The problem modelling must incorporate continuous innovation to increase value to end user. We have to model the problem that it is clearly defined and has flexibility as well. The problem definition should also become foundation for consistency and hence reducing waste. A well written problem statement offers a consistent version of direction and vision that defins precise driection but not the path. The problem definition may evolve during the project duration, but we should still strive to build the best possible first version. This is an up front investment, team comes together and defines and discovers the direction. We must strive to get to the root of the problem, in order to define it clearly. A Good Problm Definition :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;is written Clearly and Concisely&lt;/li&gt;
  &lt;li&gt;is difference between current and future state&lt;/li&gt;
  &lt;li&gt;has a measurable success criteria&lt;/li&gt;
  &lt;li&gt;is internally consistent.&lt;/li&gt;
  &lt;li&gt;is not defining a solution&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-much-documentation&quot;&gt;How much Documentation?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;If we aim to ship software every sprint, our documentation must be in sync.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To create a document, we must understand the purpose of document. Document without a purpose is a waste and must be avoided. For every document you can find someone, who will think it is valuable. The challenge is that value is invariably determined by the customer, not the producer. Dr. Dobb proposed formula to calcluate the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cruft&quot; target=&quot;_blank&quot;&gt;Cruft&lt;/a&gt; of a docuemnt.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CRUFT = * C * R * U * F * T

C = The percentage of the document that is currently &quot;correct&quot;.
R = The chance that the document will be read by the intended audience.
U = The percentage of the document that is actually understood by the intended audience.
F = The chance that the material contained in document will be followed.
T = The chance that the document will be trusted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The CRUFT rating of the document, with 100% being a bad thing, is calculated with the following formula:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;100% - C * R * U * F * T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-to-build-effective-documentation&quot;&gt;How to build effective documentation?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Create Views, Not Copies of documents. Reduce CRUFT in dcoumentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We want to be as light as possible with documentation like other areas to minimize waste. Instead of describing same thing in three places, create the documentation in one place and reference it from others. This not only reduces tracability and maintainence burden but also increases consistency. Code is the best place to document, followed by Wiki based markdown, as opposed to traditional word and PDF documents. The documentation must also be barely good enough, but that does not imply low quality. The documenation is continiously changing in Agile/Lean and we should strive to keep it in sync with the system implementation. This is easy to say, hard to do; but builds with practice. Some tips for writing effective documentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Write stable, not speculative, concepts.&lt;/li&gt;
  &lt;li&gt;Prefer executable work products over static ones.&lt;/li&gt;
  &lt;li&gt;Document only what people need.&lt;/li&gt;
  &lt;li&gt;Dont’ try to get first time right, iteration is good.&lt;/li&gt;
  &lt;li&gt;Document late.&lt;/li&gt;
  &lt;li&gt;Be concise!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-an-adr&quot;&gt;What is an ADR?&lt;/h2&gt;
&lt;p&gt;An architecture decision record (ADR) is a document that captures an important architecture decision made along with its context and consequences. ADR Captures the decision at the time it is made. A good, ideally describes following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Issue&lt;/li&gt;
  &lt;li&gt;Decision&lt;/li&gt;
  &lt;li&gt;Ontology - Category/Tagging etc.&lt;/li&gt;
  &lt;li&gt;Assumptions&lt;/li&gt;
  &lt;li&gt;Constraints&lt;/li&gt;
  &lt;li&gt;Alternatives&lt;/li&gt;
  &lt;li&gt;Reasoning/Argument for choice&lt;/li&gt;
  &lt;li&gt;Implications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-refactoring-affect-architecture&quot;&gt;How does refactoring affect architecture?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;The structure of components, their interrelationships, and the principles and guidelines governing their design and evolution over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Refacotring is the process of improving intrenal structure of code without altering the functionality. The refactoring is usually small changes, but sometime there are large scale changes. We decorate the term with the word “architectural” to make it obvious that we are describing larger-scale, system change. Refactoring is a key aspect of Agile Software delivery. We must be open to changing needs and facilitate refactoring, but at the same time define clear &lt;em&gt;Guardrails&lt;/em&gt; to protect system from going into dangerous territory.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/lean-architecture-1&quot; target=&quot;_blank&quot;&gt;Lean Architecture Article in dzone by Chris Shayan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.scaledagileframework.com/agile-architecture/&quot; target=&quot;_blank&quot;&gt;Agile Architecture in SAFe Agile Framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/articles/ea-in-lean-enterprise.html&quot; target=&quot;_blank&quot;&gt;Role of EA in Lean Enterprise&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://agilemodeling.com/essays/agileArchitecture.htm&quot; target=&quot;_blank&quot;&gt;Agile Modelling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Agile_architecture&quot; target=&quot;_blank&quot;&gt;Agile Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.drdobbs.com/architecture-and-design/dr-dobbs-agile-modeling-newsletter/201001273&quot; target=&quot;_blank&quot;&gt;Calculating Documentation Cruft&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joelparkerhenderson/architecture-decision-record&quot; target=&quot;_blank&quot;&gt;Architecture decision record (ADR)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://adr.github.io/&quot; target=&quot;_blank&quot;&gt;Github ADR Organization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pubs.opengroup.org/architecture/o-aa-standard/index.html&quot; target=&quot;_blank&quot;&gt;Open Agile Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="architecture" /><summary type="html">Photo by Marco Ceschi</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/practical-lean-architecture/pisa.jpg" /><media:content medium="image" url="https://www.achowdhary.com/practical-lean-architecture/pisa.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Python 3 Site Configuration</title><link href="https://www.achowdhary.com/python-site-configuration/" rel="alternate" type="text/html" title="Python 3 Site Configuration" /><published>2022-05-09T10:59:07+05:30</published><updated>2022-05-09T10:59:07+05:30</updated><id>https://www.achowdhary.com/python-site-configuration</id><content type="html" xml:base="https://www.achowdhary.com/python-site-configuration/">&lt;figure&gt;
&lt;img src=&quot;site-config.jpg&quot; alt=&quot;Site Configuration&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;This blog exists because the &lt;a href=&quot;https://docs.python.org/3/library/site.html&quot; target=&quot;_blank&quot;&gt;official python site configuration documentation&lt;/a&gt; is not very clear.&lt;/p&gt;

&lt;h1 id=&quot;site-packages&quot;&gt;site-packages&lt;/h1&gt;
&lt;p&gt;Python installation has a site-packages directory inside the module directory. This directory is where user installed packages are dropped. In other words when a new package is installed, the content of package are dropped into site-packages directory. It is the target directory of manually built Python packages. When you build and install Python packages from source (using distutils, probably by executing python setup.py install), you will find the installed modules in site-packages by default.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; module handles site-specific configuration, especially the import path or module search path. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site&lt;/code&gt; is automatically imported each time the interpreter starts up. On import, it extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.path&lt;/code&gt; with site-specific names constructed by combining the prefix values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.prefix&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.exec_prefix&lt;/code&gt; with several suffixes. The prefix values used are saved in the module-level variable PREFIXES for reference later. Under Windows, the suffixes are an empty string and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/site-packages&lt;/code&gt;. For Unix-like platforms, the values are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/python$version/site-packages&lt;/code&gt; (where $version is replaced by the major and minor version number of the interpreter, such as 3.5) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/site-python&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;import-path&quot;&gt;Import Path&lt;/h1&gt;
&lt;p&gt;The search path for modules is managed as a Python list saved in sys.path. The default contents of the path include the directory of the script used to start the application and the current working directory.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import sys
for pdir in sys.path:
    print pdir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;pythonpath&quot;&gt;PYTHONPATH&lt;/h1&gt;
&lt;p&gt;This is the most non-intrusive way of modifying the default search path. The format for setting the environment variable is same as the shell’s PATH: one or more directory pathnames separated by os.pathsep (e.g. colons on Unix or semicolons on Windows). Non-existent directories are silently ignored. In addition to normal directories, individual PYTHONPATH entries may refer to zipfiles containing pure Python modules (in either source or compiled form). Extension modules cannot be imported from zipfiles.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on Unix like system : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $PYTHONPATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;on Windows : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo %PYTHONPATH%&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;from within Python
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
os.environ['PYTHONPATH']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;user_site-and-pythonnousersite&quot;&gt;USER_SITE and PYTHONNOUSERSITE&lt;/h1&gt;

&lt;h2 id=&quot;siteuser_site&quot;&gt;site.USER_SITE&lt;/h2&gt;
&lt;p&gt;Path to the user site-packages for the running Python, defaults are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local/lib/pythonX.Y/site-packages&lt;/code&gt; for UNIX and non-framework macOS builds&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Python/X.Y/lib/python/site-packages&lt;/code&gt; for macOS framework builds&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; %APPDATA%\Python\PythonXY\site-packages&lt;/code&gt; on Windows. 
This directory is a site directory, which means that .pth files in it will be processed (discussed below).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pythonnousersite&quot;&gt;PYTHONNOUSERSITE&lt;/h2&gt;
&lt;p&gt;The user site directory can be set through the PYTHONNOUSERSITE environment variable to override above platform-specific defaults.
site.USER_BASE and PYTHONUSERBASE are related variable to configure python base directory e.g &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local&lt;/code&gt; on Unix.&lt;/p&gt;

&lt;h1 id=&quot;siteaddsitedir-and-syspathappend&quot;&gt;site.addsitedir and sys.path.append&lt;/h1&gt;
&lt;p&gt;In the code following two mehtod could be used to modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.path&lt;/code&gt;, or python import search path.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;sys.path.append(‘/path/to/search’)&lt;/li&gt;
  &lt;li&gt;site.addsitedir(‘/path/to/site’)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The difference between 1 and 2 is just plain appending is that when you use site.addsitedir, it also looks for .pth files within that directory. This directory can possibly be used to add additional directories to sys.path using .pth files (see below for more details).&lt;/p&gt;

&lt;h1 id=&quot;pth-files&quot;&gt;.pth files&lt;/h1&gt;
&lt;p&gt;A path configuration file is a plain text file with the extension .pth. The paths in this file can be used to extend the import path to look for location that would not have been added automatically. It’s contents are added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.path&lt;/code&gt;. Important points to note about .pth file.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;File must have extension of .pth e.g my-modules.pth&lt;/li&gt;
  &lt;li&gt;File must be placed in site dir.&lt;/li&gt;
  &lt;li&gt;Each line must contain a single path that will be appended to sys.path&lt;/li&gt;
  &lt;li&gt;Non existant paths are ignored&lt;/li&gt;
  &lt;li&gt;No check is made that the item refers to a directory rather than a file.&lt;/li&gt;
  &lt;li&gt;Duplicates are ignored&lt;/li&gt;
  &lt;li&gt;Blank lines and lines beginning with # are skipped&lt;/li&gt;
  &lt;li&gt;Modules in the added directories will not override standard modules&lt;/li&gt;
  &lt;li&gt;Paths can be absolute or relative&lt;/li&gt;
  &lt;li&gt;Relative Paths are relative to the directory containing the .pth file&lt;/li&gt;
  &lt;li&gt;Lines starting with import (followed by space or tab) are executed.&lt;/li&gt;
  &lt;li&gt;An executable line in a .pth file is run at every Python startup.&lt;/li&gt;
  &lt;li&gt;If a site directory contains multiple .pth files, they are processed in alphabetical order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;site-packages
├── mypath.pth
└── my-site
    └── mymodule.py

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;mypath.pth file contains:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;sitecustomizepy-and-usercustomizepy&quot;&gt;sitecustomize.py and usercustomize.py&lt;/h1&gt;

&lt;p&gt;PTH files are only processed if they are in the site-packages directory ( to be precise in a “site directory”). Site directory itself is a  global setting for the Python installation and does not depend on the current/working directory. The site module is also responsible for loading site-wide customization defined by the local site owner in a sitecustomize module. Uses for sitecustomize include extending the import path and enabling coverage, profiling, or other development tools.&lt;/p&gt;

&lt;p&gt;After these path manipulations, an attempt is made to import a module named sitecustomize, which can perform arbitrary site-specific customizations. sitecustomize.py is imported before Python starts running your own code. This can be used to add a new site dir:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import site
site.addsitedir('/path/to/site')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Similar to sitecustomize, the usercustomize module can be used to set up user-specific settings each time the interpreter starts up. usercustomize is loaded after sitecustomize, so site-wide customizations can be overridden.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/site.html&quot; target=&quot;_blank&quot;&gt;https://docs.python.org/3/library/site.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pymotw.com/3/site/index.html&quot; target=&quot;_blank&quot;&gt;site — Site-wide Configuration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html&quot; target=&quot;_blank&quot;&gt;Python Command line and environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="Python" /><category term="Simplified" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/python-site-configuration/site-config.jpg" /><media:content medium="image" url="https://www.achowdhary.com/python-site-configuration/site-config.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Python Monkey Patching</title><link href="https://www.achowdhary.com/monkey-patching/" rel="alternate" type="text/html" title="Python Monkey Patching" /><published>2022-02-18T21:22:42+05:30</published><updated>2022-02-18T21:22:42+05:30</updated><id>https://www.achowdhary.com/monkey-patching</id><content type="html" xml:base="https://www.achowdhary.com/monkey-patching/">&lt;figure&gt;
&lt;img src=&quot;monkey.jpg&quot; alt=&quot;You are not allowed!&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
	Photo by &lt;a href=&quot;https://unsplash.com/@andremouton&quot; style=&quot;color: grey !important;&quot; target=&quot;_blank&quot;&gt;Andre Mouton
&lt;/a&gt; 
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Python is a characteristic dynamic scripting language. Not only it has dynamic type are but it’s object model is also dynamic. Python’s classes are mutable, and methods are just attributes of the class; This allows us to modify its behavior at run time. This is funnily called &lt;em&gt;Monkey Patching&lt;/em&gt;, with possible reference to &lt;em&gt;guerrilla patch&lt;/em&gt; which referred to changing code sneakily.&lt;/p&gt;

&lt;p&gt;Monkey Patching is simply the dynamic replacement of attributes at runtime. In Python, the term monkey patch refers to dynamic (or run-time) modifications of a function, class or module. Let’s understand with an example, we use a python package wich has a class like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# monkey.py
	class Me:
	     def who_am_i(self):
	         print (&quot;I am a Monkey&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now since I am a human, I don’t like this so I Monkey Patch [pun intended].&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	import monkey
	def i_am_human(self):
	    print (&quot;I am human&quot;)
	   
	# replacing address of &quot;who_am_i&quot; with &quot;i_am_human&quot;
	monkey.Me.who_am_i = i_am_human
	obj = monkey.Me()
	  
	# calling function &quot;who_am_i&quot; whose address got replaced
	# with function &quot;i_am_human()&quot;
	obj.who_am_i()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will print “I am a human”, which is corret; But it need a bit of &lt;em&gt;Monkey Patching&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mutable-and-immutable-data-types&quot;&gt;Mutable and Immutable Data Types&lt;/h2&gt;
&lt;p&gt;To understand monkey patching we need to understand the differences between mutable and immutable data types in Python. We can think about variables in Python as labels instead of boxes. In Python, a variable is a label that we assign to an object; it is the way we, as humans, have to identify it. However, what is important is the data underlying the label, its value, and its type. Custom objects are mutable, and therefore their attributes can be replaced without creating a new copy of the object. so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float, decimal, complex, bool, string, tuple, range, frozenset, bytes&lt;/code&gt; etc. are Mutable while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dictionary&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bytearray&lt;/code&gt;, &lt;em&gt;user-defined classes&lt;/em&gt; are Immutable. Here we are interested in immutable object, becausethey can be changed in-place.&lt;/p&gt;

&lt;h2 id=&quot;patching-an-instance&quot;&gt;Patching an Instance&lt;/h2&gt;
&lt;p&gt;Above instance patched a class method and all instances of the class will have the patched method. We can also patch a specific instance.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import types
import monkey

monkey1 = monkey.Me()
monkey2 = monkey.Me()

def i_am_human(self):
	print (&quot;I am human&quot;)

monkey2.who_am_i = types.MethodType(i_am_human, monkey2)

print(monkey1.who_am_i())
# I am a Monkey
print(monkey2.get_value())
# I am a human
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So with the use of types, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monkey2&lt;/code&gt; has has been patched to become a human.&lt;/p&gt;

&lt;h2 id=&quot;patching-a-module&quot;&gt;Patching a Module&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# whoami.py

	def who_am_i(monkey_type):
	    print (f&quot;I am a {monkey_type}&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# human.py
	import whoami

	def who_am_i():
	    whoami.who_am_i(&quot;Human&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	# monkey.py
	import whoami
	import human

	def i_am_monkey(self):
	    who_am_i(&quot;Monkey&quot;)

	 whoami.who_am_i = i_am_monkey
	 human.who_am_i()
	 # I am a Monkey

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The monkey has hacked the human module by monkey patching.&lt;/p&gt;

&lt;h2 id=&quot;word-of-caution&quot;&gt;Word of Caution&lt;/h2&gt;
&lt;p&gt;Monkey patching is very powerful. It’s useful if we are dealing with legacy code or code from other people in which we do not want to modify it extensively but still want to make it run with different versions of libraries or environments.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a general rule, the best is not to monkey patch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem with monkey-patching is that the behavior of a program becomes much harder to understand. In above example soon enough it will be confusing “Who is Monkey” and “Who is Human”. Whereever possible extend the public interface of third party library.&lt;/p&gt;

&lt;p&gt;Sometimes there Monkey Patching can be a great benefit. You could replace all instance of a method with another with just one line of code change. Monkey patching is also useful in testing, when you want to use a mock method to test.&lt;/p&gt;

&lt;h2 id=&quot;using-gorrilla-package-&quot;&gt;Using Gorrilla Package &lt;a href=&quot;https://pypi.org/project/gorilla/&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I like gorrilla, while monkey patching, it makes the process both intuitive and convenient even when faced with large numbers of patches to create.  Here is an example:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import gorilla
&amp;gt;&amp;gt;&amp;gt; import destination
&amp;gt;&amp;gt;&amp;gt; @gorilla.patches(destination.Class)
... class MyClass(object):
...     def method(self):
...         print(&quot;Hello&quot;)
...     @classmethod
...     def class_method(cls):
...         print(&quot;world!&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The code above creates two patches, one for each member of the class MyClass, but does not apply them yet. In other words, they define the information required to carry on the operation but are not yet inserted into the specified destination class destination.Class.&lt;/p&gt;

&lt;p&gt;Such patches created with the decorators can then be automatically retrieved by recursively scanning a package or a module, then applied:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import gorilla
&amp;gt;&amp;gt;&amp;gt; import mypackage
&amp;gt;&amp;gt;&amp;gt; patches = gorilla.find_patches([mypackage])
&amp;gt;&amp;gt;&amp;gt; for patch in patches:
...     gorilla.apply(patch)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can find more in &lt;a href=&quot;https://gorilla.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;Gorilla Documentation&lt;/a&gt;
```&lt;/p&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="HowTo" /><category term="Python" /><summary type="html">Photo by Andre Mouton</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/monkey-patching/monkey.jpg" /><media:content medium="image" url="https://www.achowdhary.com/monkey-patching/monkey.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Big Data Architecture Patterns</title><link href="https://www.achowdhary.com/big-data-architecture/" rel="alternate" type="text/html" title="Big Data Architecture Patterns" /><published>2022-01-16T20:38:14+05:30</published><updated>2022-01-16T20:38:14+05:30</updated><id>https://www.achowdhary.com/big-data-architecture</id><content type="html" xml:base="https://www.achowdhary.com/big-data-architecture/">&lt;figure&gt;
	&lt;img src=&quot;bda.jpg&quot; alt=&quot;Big data architecture&quot; /&gt; 
	&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
		Photo by &lt;a href=&quot;https://unsplash.com/@fabioha&quot; style=&quot;color: grey !important;&quot; target=&quot;_blank&quot;&gt;Fabio&lt;/a&gt; 
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Big data architecture is the foundation for big data analytics. The big data architecture framework serves as a reference blueprint for big data infrastructures and solutions, logically defining how big data solutions will work, the components that will be used, how information will flow, and security details. A goood big data system is designed to handle the ingestion, processing, and analysis of data that is too large or complex for traditional database systems.&lt;/p&gt;

&lt;p&gt;The size of Big Data realm differs for organizations. For some, it can mean hundreds of gigabytes of data, while for others it means hundreds of terabytes. Size of data, need for advance analytics capabilities, users and the budget are some of the key factors that affect the big data architecture.&lt;/p&gt;

&lt;h1 id=&quot;four-stages&quot;&gt;Four Stages&lt;/h1&gt;
&lt;p&gt;Big data architecture process is not different from any other system design at high level. However each stage the process differs and attention should be paied to the details.&lt;/p&gt;

&lt;h3 id=&quot;1-analyze-the-problem&quot;&gt;1. Analyze the Problem:&lt;/h3&gt;
&lt;p&gt;Understand data variety, velocity, and challenges with the current system. Common use cases include data archival, process offload, data lake implementation, unstructured data processing, and data warehouse modernization. Architecture team needs to work with many departments, stake-holders and vendor model the the problem, understand the budget. Of the three V’s of Big Data System (volume, variety and velocity), velocity is most tricky to asses and model. Speed matters in business and big data velocity underpins the speed of business decisions.&lt;/p&gt;

&lt;h3 id=&quot;2-decide-deployment-strategy&quot;&gt;2. Decide Deployment Strategy:&lt;/h3&gt;
&lt;p&gt;Deployment can be either on-premises, which tends to be more secure; cloud-based, which is cost effective and provides flexibility regarding scalability; or a mix deployment strategy. If cloud based bring an agreement on the the provider AWS, Azure or GCP. The choice has some technical merits, but largerly decided by data governance, organization policies and IT Strategy. Clould based solutions work best for Big Data Solutions. Since most of the Big data systems have volatile resource requirment, autoscaling on cloud can result in big savings.&lt;/p&gt;

&lt;h3 id=&quot;3-select-tooling&quot;&gt;3. Select Tooling:&lt;/h3&gt;
&lt;p&gt;Hadoop is one of the most widely recognized big data architecture tools for managing big data end to end architecture. Select from variou various Hadoop distribution, Databricks, BigInsights, Cloudera. Next select various component, orchestration tools, visualization tools etc. The tooling is dependent on the Deployment strategy e.g tooling for GCP will be very different from tooling on AWS or Azure.&lt;/p&gt;

&lt;h3 id=&quot;4-architecure-design-and-devops-planning&quot;&gt;4. Architecure, Design and Devops planning:&lt;/h3&gt;
&lt;p&gt;When above 3 stages have completed, we have enough information to start on actual architecture and design for our Big Data System  This includes planning, pipeline design, CICD, data security, monitoring, autoscaling, disaster recovery, data governance etc.&lt;/p&gt;

&lt;h1 id=&quot;architectural-patterns&quot;&gt;Architectural Patterns&lt;/h1&gt;
&lt;p&gt;Unstructured data is the fastest growing type of data, some example could be imagery, sensors, telemetry, video, documents, log files, and email data files. There are several techniques to address this problem space of unstructured analytics. The techniques share a common characteristics of scale-out, elasticity and high availability. MapReduce, in conjunction with the Hadoop Distributed File System (HDFS) and HBase database, as part of the Apache Hadoop project is a modern approach to analyze unstructured data. Hadoop clusters are an effective means of processing massive volumes of data, and can be improved with the right architectural approach. There are three main architural patterns:&lt;/p&gt;

&lt;h3 id=&quot;lambda-architecture&quot;&gt;Lambda architecture&lt;/h3&gt;
&lt;figure&gt;
&lt;img src=&quot;lambda.png&quot; alt=&quot;DPP&quot; style=&quot;background-color:white;&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    Lambda Architecture
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The name lambda architecture is derived from a functional processing paradime, data processing is funcation of all data. This architecture pattern provide balance between latency, throughput, and fault-tolerance by using batch processing and real-time stream processing simultaneously. Lambda architecture depends on a data model with an append-only, immutable data source that serves as a system of record. Three Layers of Lambda Architecture are&lt;/p&gt;

&lt;h4 id=&quot;batch-layer&quot;&gt;Batch Layer&lt;/h4&gt;
&lt;p&gt;New data comes continuously, as a feed to the data system. It gets fed to the batch layer and the speed layer simultaneously. It looks at all the data at once and eventually corrects the data in the stream layer.  Here we can find lots of ETL and a traditional data warehouse. This layer is built using a predefined schedule, usually once or twice a day. The batch layer has two very important functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;To manage the master dataset&lt;/li&gt;
  &lt;li&gt;To pre-compute the batch views.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;serving-layer&quot;&gt;Serving Layer&lt;/h4&gt;
&lt;p&gt;The outputs from the batch layer in the form of batch views and those coming from the speed layer in the form of near real-time views get forwarded to the serving.  This layer indexes the batch views so that they can be queried in low-latency on an ad-hoc basis.&lt;/p&gt;

&lt;h4 id=&quot;speed-layer-stream-layer&quot;&gt;Speed Layer (Stream Layer)&lt;/h4&gt;
&lt;p&gt;This layer handles the data that are not already delivered in the batch view due to the latency of the batch layer. In addition, it only deals with recent data in order to provide a complete view of the data to the user by creating real-time views.&lt;/p&gt;

&lt;h4 id=&quot;benefits-of-lambda-architectures&quot;&gt;Benefits of lambda architectures&lt;/h4&gt;
&lt;p&gt;Here are the main benefits of lambda architectures:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No Server Management – you do not have to install, maintain, or administer any software.&lt;/li&gt;
  &lt;li&gt;Flexible Scaling – your application can be either automatically scaled or scaled by the adjustment of its capacity&lt;/li&gt;
  &lt;li&gt;Automated High Availability – refers to the fact that serverless applications have already built-in availability and faults tolerance. It represents a guarantee that all requests will get a response about whether they were successful or not.&lt;/li&gt;
  &lt;li&gt;Business Agility – React in real-time to changing business/market scenarios&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;challenges-with-lambda-architectures&quot;&gt;Challenges with lambda architectures&lt;/h4&gt;
&lt;p&gt;Lambda architectures can be highly complex.  The batch and streaming sides each require a different code base that must be maintained and kept in sync so that processed data produces the same result from both paths. Yet attempting to abstract the code bases into a single framework puts many of the specialized tools in the batch and real-time ecosystems out of reach.&lt;/p&gt;

&lt;h3 id=&quot;kappa-architecture&quot;&gt;Kappa architecture&lt;/h3&gt;
&lt;p&gt;Kappa Architecture is a simplification of Lambda Architecture; it is Lambda architecture without batch processing. To replace batch processing, data is simply fed through the streaming system quickly. The main premise behind the Kappa Architecture is that you can perform both real-time and batch processing, especially for analytics, with a single codebase and infrastructure. If you need to recompute the entire data set (equivalent to what the batch layer does in lambda), you simply replay the stream. The data is ingested as a stream of events into a distributed and fault tolerant unified log. These events are ordered, and the current state of an event is changed only by a new event being appended. Similar to a lambda architecture’s speed layer, all event processing is performed on the input stream and persisted as a real-time view.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;kappa.png&quot; alt=&quot;DPP&quot; style=&quot;background-color:white;&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    Kappa Architecture
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;One downside of Kappa is the need to re-process events in the case of errors; however access to affordable, elastic compute makes&lt;/p&gt;

&lt;p&gt;Use Cases&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the processing applied to the real-time data and the historical data are same.&lt;/li&gt;
  &lt;li&gt;Data systems that are online learners and therefore don’t need the batch layer.&lt;/li&gt;
  &lt;li&gt;The order of the events and queries is not predetermined. Stream processing platforms can interact with the database at any time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are few other newer Big Data Architectures:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Google Inspireed Zeta Architecture&lt;/li&gt;
  &lt;li&gt;IOT Architecture (IoT-A)&lt;/li&gt;
  &lt;li&gt;Mu Architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_architecture&quot;&gt;https://en.wikipedia.org/wiki/Lambda_architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/data-guide/big-data/&quot;&gt;https://docs.microsoft.com/en-us/azure/architecture/data-guide/big-data/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eng.uber.com/kappa-architecture-data-stream-processing/&quot;&gt;https://eng.uber.com/kappa-architecture-data-stream-processing/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/radar/questioning-the-lambda-architecture/&quot;&gt;https://www.oreilly.com/radar/questioning-the-lambda-architecture/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://radar.oreilly.com/2015/04/zeta-architecture-hexagon-is-the-new-circle.html&quot;&gt;http://radar.oreilly.com/2015/04/zeta-architecture-hexagon-is-the-new-circle.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="bigdaga" /><category term="architecture" /><summary type="html">Photo by Fabio</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/big-data-architecture-101/bda.jpg" /><media:content medium="image" url="https://www.achowdhary.com/big-data-architecture-101/bda.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Spark3 Cheat Sheet</title><link href="https://www.achowdhary.com/spark-cheat-sheet/" rel="alternate" type="text/html" title="Spark3 Cheat Sheet" /><published>2021-07-15T11:22:42+05:30</published><updated>2021-07-15T11:22:42+05:30</updated><id>https://www.achowdhary.com/spark-cheat-sheet</id><content type="html" xml:base="https://www.achowdhary.com/spark-cheat-sheet/">&lt;figure&gt;
&lt;img src=&quot;spark3-cheat-sheet.png&quot; alt=&quot;What's new in Spark3?&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;Okie, this is not really a cheatsheet. It is more about “what’s new in Spark 3?”, so more appropriate title would be “What’s new in Spark3 Cheat Sheet”. So Let’s first look at what’s new in Spark3. As with cheet sheet, we will only discuss most useful featurs, improvements that were introduced in Spark3:&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;

&lt;h4 id=&quot;1-adaptive-query-execution-aqe-&quot;&gt;1. Adaptive Query Execution (AQE) &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-31412&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;By far, this has to be the number one reason to upgrade to Spark3. Every spark developer was so looking forward to AQE improvement and they surely do not disappoint. Prior to 3.0, Spark optimized by creating an execution plan before the query execution, AQE applies a second level of optimization based on the metrics it sees with each stage.&lt;/p&gt;

&lt;p&gt;In Spark 3.0, the AQE framework is result of 40+ Improvements, three main ones are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dynamically coalescing shuffle partitions&lt;/strong&gt; simplifies the number of shuffle partitions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamically switching join strategies&lt;/strong&gt; partially avoids executing suboptimal plans due to missing statistics and/or size misestimation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamically optimizing skew joins&lt;/strong&gt; can parallelize skew processing and achieve better overall performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adaptive Query Execution is disabled by default. Adaptive Query Execution is used if query meets the following criteria:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is not a streaming query&lt;/li&gt;
  &lt;li&gt;It contains at least one exchange (usually when there’s a join, aggregate or window operator) or one subquery&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;In order to enable AQE, set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark.sql.adaptive.enabled&lt;/code&gt; configuration property to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After enabling Adaptive Query Execution, Spark performs 2x improvement on TPC-DS over Spark 2. There’s no need to “know” your data in advance any more. AQE will figure out the data and improve the query plan as the query runs, increasing query performance for faster analytics and system performance.&lt;/p&gt;

&lt;h4 id=&quot;2-dynamic-partition-pruning&quot;&gt;2. Dynamic Partition Pruning&lt;/h4&gt;
&lt;p&gt;Basically, dynamic partition pruning is to avoid partition scanning based on the queried results of the other query fragments. It is important for star schema queries. Spark3 implements dynamic partition pruning by adding a dynamic-partition-pruning filter if there is a partitioned table and a filter on the dimension table. The filter is then planned using a heuristic approach:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;As a broadcast relation if it is a broadcast hash join. The broadcast relation will then be transformed into a reused broadcast exchange by the ReuseExchange rule; or&lt;/li&gt;
  &lt;li&gt;As a subquery duplicate if the estimated benefit of partition table scan being saved is greater than the estimated cost of the extra scan of the duplicated subquery; otherwise&lt;/li&gt;
  &lt;li&gt;As a bypassed condition (true).
 Below shows a .&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src=&quot;dpp.png&quot; alt=&quot;DPP&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    A basic example of DPP
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;new-features&quot;&gt;New Features&lt;/h1&gt;

&lt;h4 id=&quot;3-new-structured-streaming&quot;&gt;3. New Structured Streaming&lt;/h4&gt;
&lt;p&gt;A new Structured Streaming tab to has been added to Spark UI to monitor Structured streaming applications. This tab provides the run ID, Status, Start Time, Duration for each micro-batch along with runtime statistics. This helps the developer to debug and understand what’s happening with the streaming queries. It has two sections.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Active Streaming Queries&lt;/li&gt;
  &lt;li&gt;Completed Streaming Queries&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src=&quot;streaming-ui.png&quot; alt=&quot;DPP&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    Structured Streaming UI
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;4-accelerator-aware-scheduler-project-hydrogen&quot;&gt;4. Accelerator-aware Scheduler (Project Hydrogen)&lt;/h4&gt;
&lt;p&gt;GPUs and other accelerators have been widely used for accelerating special workloads, e.g., deep learning and signal processing. While users from the AI community use GPUs heavily, they often need Apache Spark to load and process large datasets and to handle complex data scenarios like streaming. Spark is not aware of GPUs and hence cannot properly request and schedule them for users. This leaves a critical gap to unify big data and AI workloads and make life simpler for end users.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;hydrogen.png&quot; alt=&quot;Project Hydrogen&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    Accelerating Apache Spark 3.0 with GPUs and RAPIDS
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&quot;spark2gpu.png&quot; alt=&quot;Project Hydrogen&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    n Spark 2.x, separate clusters were needed for ETL on CPUs, and model training on GPUs.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
&lt;img src=&quot;spark3gpu.png&quot; alt=&quot;Project Hydrogen&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
    In Apache Spark 3.0, you can now have a single pipeline, from data ingest to data preparation to model training on a GPU powered cluster.
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;4-other-notable-features&quot;&gt;4. Other notable Features&lt;/h4&gt;

&lt;h5 id=&quot;41-datasource-to-read-binary-files&quot;&gt;4.1 Datasource to Read Binary Files&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    val df = spark.read.format(&quot;binaryFile&quot;).load(&quot;/tmp/binary/spark.png&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;42-feature-to-read-recursive-folders&quot;&gt;4.2 Feature to Read Recursive folders&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    spark.read.option(&quot;recursiveFileLookup&quot;, &quot;true&quot;).csv(&quot;/path/to/folder&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;43-multiple-character-delimiter-support&quot;&gt;4.3 Multiple Character Delimiter Support&lt;/h5&gt;
&lt;p&gt;For example, to read a CSV file with the following content.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    col1||col2||col3||col4
    val1||val2||val3||val4
    val1||val2||val3||val4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;below code can be used.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    val df  = spark.read
      .option(&quot;delimiter&quot;,&quot;||&quot;)
      .option(&quot;header&quot;,&quot;true&quot;)
      .csv(&quot;/tmp/data/douplepipedata.csv&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;44-dataframetail-feature&quot;&gt;4.4 DataFrame.tail() feature&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    val data=spark.range(1,100).toDF(&quot;num&quot;).tail(5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;44-dataframetail-feature-1&quot;&gt;4.4 DataFrame.tail() feature&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    val data=spark.range(1,100).toDF(&quot;num&quot;).tail(5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;45-new-built-in-functions&quot;&gt;4.5 New built-in functions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;sinh, cosh, tanh, asinh, acosh, atanh &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-28133&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;any, every, some &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-19851&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bit_and, bit_or &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-27879&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bit_count &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-29491&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bit_xor &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-29545&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bool_and, bool_or &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-30184&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;count_if &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-27425&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;date_part &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-28690&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;extract &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-23903&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;forall &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-27905&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;from_csv &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-25393&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make_date &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-28432&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make_interval &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-29393&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;make_timestamp &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-28495&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;map_entries &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-23935&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;map_filter &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-23937&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;map_zip_with &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-23938&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;max_by, min_by &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-27653&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;schema_of_csv &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-25672&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;to_csv &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-25683&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;transform_keys &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-23939&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;transform_values &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-23940&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;typeof &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-29961&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;version &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-29554&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;xxhash64 &lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-27099&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;5-catalog-plugin-api&quot;&gt;5. Catalog plugin API&lt;/h4&gt;
&lt;p&gt;This will bring multi-catalog support to Spark and allow external catalog implementations. In Spark 3 multiple catalogs can be added:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    spark.sql.catalog.catalog1=...
    spark.sql.catalog.catalog1.type=...
    spark.sql.catalog.catalog1.warehouse=...
    spark.sql.catalog.catalog2=...
    spark.sql.catalog.catalog2.type=...
    spark.sql.catalog.catalog2.warehouse=...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and can be used in query:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    spark.sql(&quot;SELECT * FROM catalog1.db1.table1&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;upgrades-and-enhancements&quot;&gt;Upgrades and Enhancements&lt;/h1&gt;

&lt;h4 id=&quot;6-improvements-on-pandas-udf-api&quot;&gt;6. Improvements on pandas UDF API&lt;/h4&gt;
&lt;p&gt;Pandas UDFs (User-Defined Functions) are probably one of the most significant Pandsa improvement added to Spark since version 2.3 as they allow users to leverage pandas API. The newest release of Apache Spark introduced a new interface of Pandas UDFs with Python type hints. Example:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    import pandas as pd
    from pyspark.sql.functions import pandas_udf

    @pandas_udf('long')
    def pandas_subtract_unit(s: pd.Series) -&amp;gt; pd.Series:
        return s - 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;7-switch-to-proleptic-gregorian-calendar&quot;&gt;7. Switch to Proleptic Gregorian calendar&lt;/h4&gt;
&lt;p&gt;Earlier version of Spark supports Dates in Julian and Gregorian calendar: For dates before 1582, the Julian calendar was used, for dates, after 1582 the Gregorian calendar was used. This is similar to Dates in JDK 7 and before which uses java.sql.Date API. From JDK 8, a new Proleptic Gregorian calendar has been introduced with java.time.LocalDate API.&lt;/p&gt;

&lt;h4 id=&quot;8-better-ansi-sql-compatible-&quot;&gt;8. Better ANSI SQL compatible &lt;a href=&quot;https://spark.apache.org/docs/3.0.0/sql-ref-ansi-compliance.html&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Since Spark 3.0, Spark SQL introduces two experimental options to comply with the SQL standard: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark.sql.ansi.enabled&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark.sql.storeAssignmentPolicy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark.sql.ansi.enabled&lt;/code&gt; is set to true, Spark SQL follows the standard in basic behaviours (e.g., arithmetic operations, type conversion, SQL functions and SQL parsing). Moreover, Spark SQL has an independent option to control implicit casting behaviours when inserting rows in a table. The casting behaviours are defined as store assignment rules in the standard.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spark.sql.storeAssignmentPolicy&lt;/code&gt; is set to ANSI, Spark SQL complies with the ANSI store assignment rules. This is a separate configuration because its default value is ANSI, while the configuration spark.sql.ansi.enabled is disabled by default.&lt;/p&gt;

&lt;h4 id=&quot;9--upgrades&quot;&gt;9.  Upgrades&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Hadoop 3 Upgrade&lt;/li&gt;
  &lt;li&gt;JDK 11 Support&lt;/li&gt;
  &lt;li&gt;Python3&lt;/li&gt;
  &lt;li&gt;Scala 2.12&lt;/li&gt;
  &lt;li&gt;Kfka 2.4.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you still think this is not a cheat sheet, here is one of &lt;a href=&quot;http://datacamp-community-prod.s3.amazonaws.com/acfa4325-1d43-4542-8ce4-bea2d287db10&quot; target=&quot;_blank&quot;&gt;my favorite Spark 3 Cheat Sheet&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/releases/spark-release-3-0-0.html&quot; target=&quot;_blank&quot;&gt; Spark 3.0.3 Release Changelog &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-31412&quot; target=&quot;_blank&quot;&gt; Adaptive Query Execution &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://databricks.com/blog/2020/06/18/introducing-apache-spark-3-0-now-available-in-databricks-runtime-7-0.html&quot; target=&quot;_blank&quot;&gt; Databricks Spark 3.0 blog &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-11150&quot; target=&quot;_blank&quot;&gt; Dynamic Partition Pruning &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/3.0.0/web-ui.html#structured-streaming-tab&quot; target=&quot;_blank&quot;&gt; Structured Streaming Tab &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SPARK-24615&quot; target=&quot;_blank&quot;&gt; SPIP: Accelerator-aware task scheduling for Spark &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://databricks.com/session_na20/deep-dive-into-gpu-support-in-apache-spark-3-x&quot; target=&quot;_blank&quot;&gt; Deep Dive into GPU Support &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.nvidia.com/blog/accelerating-apache-spark-3-0-with-gpus-and-rapids/&quot; target=&quot;_blank&quot;&gt; Accelerating Apache Spark 3.0 with GPUs and RAPIDS &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1zLFiA1VuaWeVxeTDXNg8bL6GP3BVoOZBkewFtEnjEoo/edit#&quot; target=&quot;_blank&quot;&gt;Spark API for Table Metadata&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://books.japila.pl/spark-sql-internals/new-and-noteworthy/catalog-plugin-api-and-multi-catalog-support/&quot; target=&quot;_blank&quot;&gt; Catalog Plugin APi by example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/latest/sql-migration-guide.html&quot; target=&quot;_blank&quot;&gt; Spark3 SQL Migration Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1-kV0FS_LF2zvaRh_GhkV32Uqksm_Sq8SvnBBmRyxm30/edit&quot; target=&quot;_blank&quot;&gt; Revisiting Pandas UDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/3.0.0/sql-ref-ansi-compliance.html&quot; target=&quot;_blank&quot;&gt;Better ANSI SQL compatibality in Spark 3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="yum" /><category term="HowTo" /><category term="CheatSheet" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/spark3-cheat-sheet/spark3-cheat-sheet.png" /><media:content medium="image" url="https://www.achowdhary.com/spark3-cheat-sheet/spark3-cheat-sheet.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bash scripting tips</title><link href="https://www.achowdhary.com/bash-script-tips/" rel="alternate" type="text/html" title="Bash scripting tips" /><published>2021-05-18T23:03:42+05:30</published><updated>2021-05-18T23:03:42+05:30</updated><id>https://www.achowdhary.com/bash-script-tips</id><content type="html" xml:base="https://www.achowdhary.com/bash-script-tips/">&lt;figure&gt;
&lt;img src=&quot;shell.jpg&quot; alt=&quot;Bash Shell Script&quot; /&gt;
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
        Photo by &lt;a href=&quot;https://unsplash.com/@outsideclick&quot; style=&quot;color: grey !important;&quot; target=&quot;_blank&quot;&gt;Daniel Dan&lt;/a&gt; 
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;understanding---and-&quot;&gt;Understanding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt;  and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Square brackets are a shorthand notation for performing a conditional test. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[&lt;/code&gt; are commands in Unix.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; is a builtin command, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[[&lt;/code&gt; is a keyword&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $ type -a [
    [ is a shell builtin
    [ is /usr/bin/[

    $ type -a [[
    [[ is a shell keyword
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&lt;/code&gt; is same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt; command. Two statements below have same outcome:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    if [ &quot;$myvar&quot; = 'success' ]; then ...
    if test &quot;$myvar&quot; = 'success'; then ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[[ is bash’s improvement to the [ command. It has more syntactical features:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;handles string comparison without quotes&lt;/li&gt;
  &lt;li&gt;has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=~&lt;/code&gt; operator for regex &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if [ $myvar =~ ^suc.*s$ ]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;use-log-function&quot;&gt;Use log function&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    err() {
      echo &quot;[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*&quot; &amp;gt;&amp;amp;2
    }

    err() {
      echo &quot;[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*&quot; 
    }


    log &quot;doing_something&quot;

    if ! do_something; then
      err &quot;Unable to do_something&quot;
    fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;redirect-all-logs-to-file&quot;&gt;Redirect all logs to file&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    readonly LOG_FILE=&quot;~/mylogs/script.log&quot;
    touch $LOG_FILE

    # Open standard out at `$LOG_FILE` for write.
    exec 1&amp;gt;$LOG_FILE

    # standard error ends up going to wherever standard out goes.
    exec 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Above does not redirect output for subporocesses.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    (
      my_function
      my_script
    ) &amp;amp;&amp;gt;$LOG_FILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;concatenate-string&quot;&gt;Concatenate String&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env bash

# method 1
foo=&quot;I like&quot;
foo+=&quot; Bash Scripting.&quot;

# method 2
foo=&quot;I like&quot;
bar=&quot;Bash Scripting.&quot;
foobar=&quot;$foo $bar&quot;

# method 3
foo=&quot;Writ&quot;
foo=&quot;${foo}ing Bash Scripting is fun.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;default-value-for-variable&quot;&gt;Default value for variable&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    name=&quot;${name:-achowdhary}&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;parentheses--vs-braces-&quot;&gt;Parentheses () vs. Braces {}&lt;/h2&gt;
&lt;p&gt;Parentheses cause the commands to be run in a subshell, and braces cause the commands to be grouped together but not in a subshell.&lt;/p&gt;

&lt;h2 id=&quot;user-input&quot;&gt;User Input&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/bin/bash

read -p &quot;Enter your name [Anuradha]: &quot; name
name=${name:-Anuradha}
echo $name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://steve-parker.org/sh/tips/&quot;&gt;https://steve-parker.org/sh/tips/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je&quot;&gt;https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="bash" /><category term="HowTo" /><category term="Unix" /><summary type="html">Photo by Daniel Dan</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/bash-script-tips/shell.jpg" /><media:content medium="image" url="https://www.achowdhary.com/bash-script-tips/shell.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Disable Console Access for Jupyter Hub.</title><link href="https://www.achowdhary.com/juppyter-hub-disable-console-access/" rel="alternate" type="text/html" title="Disable Console Access for Jupyter Hub." /><published>2021-03-07T08:28:47+05:30</published><updated>2021-03-07T08:28:47+05:30</updated><id>https://www.achowdhary.com/juppyter-hub-disable-console-access</id><content type="html" xml:base="https://www.achowdhary.com/juppyter-hub-disable-console-access/">&lt;figure&gt;
&lt;img src=&quot;no-access.jpg&quot; alt=&quot;You are not allowed!&quot; /&gt; 
&lt;figcaption style=&quot;color: grey !important;&quot;&gt; 
	Photo by &lt;a href=&quot;https://unsplash.com/@fionakiwi&quot; style=&quot;color: grey !important;&quot; target=&quot;_blank&quot;&gt;Fiona Jackson
&lt;/a&gt; 
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;can-you-disable-terminal--access-in-jupyterhub&quot;&gt;Can you disable terminal  access in Jupyterhub?&lt;/h4&gt;
&lt;p&gt;The answer is not a simple Yes or No. It’s is a bit compliated and hence this post.&lt;/p&gt;

&lt;h4 id=&quot;can-you-stop-showing-terminal-from-jupyter-ui&quot;&gt;Can you stop showing Terminal from Jupyter UI?&lt;/h4&gt;

&lt;p&gt;This has a simple answer ☺️ :relaxed:. However ther is no configuration, the configuration &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotebookApp.terminals_enabled=False&lt;/code&gt; works in single user notebook but does not work in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupyterhub&lt;/code&gt; \ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupyterlab&lt;/code&gt; setup. Fortunately there is a simple way to achieve this. If you uninstall a package called ‘terminado’, terminals will disappear.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	pip uninstall -y terminado
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;does-this-secure-my-jupyter-hub-setup&quot;&gt;Does this secure my Jupyter Hub Setup?&lt;/h4&gt;

&lt;p&gt;No, because anything you can do from the terminal, you can do from a notebook anyway, so don’t rely on this as any kind of security measure. A user can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;open a Python notebook and use the %%bash or ! shell magics.&lt;/li&gt;
  &lt;li&gt;open a Python notebook, import subprocess, and execute arbitrary commands.&lt;/li&gt;
  &lt;li&gt;open a notebook for pretty much any other language and execute a shell child process (e.g., s”ls -l” ! in Scala).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you could turn off magic shell commands Python itself has the permissions to do the exact same things,so there’s very little point in even trying. There is no practical way to block the user from running system commands. Even JupyterHub, is designed with the use-case of semi-trusted users, and requires very careful set up to allow for untrusted users. From Jupyter Hub security Documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JupyterHub is designed to be a simple multi-user server for modestly sized groups of semi-trusted users. While the design reflects serving semi-trusted users, JupyterHub is not necessarily unsuitable for serving untrusted users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;what-is-my-best-options-for-securing-my-jupyterhub&quot;&gt;What is my best options for securing my JupyterHub?&lt;/h4&gt;
&lt;p&gt;If you are letting untrusted users execute code on your system, the safest approach is to run inside container without access to the system outside the container. JupyterHub has support for containerisation of notebook servers, so each user will have their own (e.g. Docker) container and you can limit access to files. If they mess up their own container it would not mess up other users or the main server. It would  alsow be relatively easy to setup backup and restore data for users.&lt;/p&gt;

&lt;p&gt;Since much of the point of IPython and Jupyter is arbitrary code execution, the security model for deploying Jupyter ought to be applying restrictions at the process/container level, rather than disabling  UI for running commands.&lt;/p&gt;

&lt;p&gt;But setting up JupyterHub instance with docker is not trivial and if you are dealing with very small team of trusted users, you should try to train and guide users. They would most likely anyway have access to server with sudo access.&lt;/p&gt;

&lt;h4 id=&quot;is-there-any-other-alternative&quot;&gt;Is there any other alternative?&lt;/h4&gt;
&lt;p&gt;If you want to use Linux Containers for isolation and security benefits, but don’t want the headache and complexity of container image management, then you could use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SystemdSpawner&lt;/code&gt;. However please note that the Jupyterhub must be run as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SystemdSpawner&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You could also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SudoSpawner&lt;/code&gt; for isolation but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SystemdSpawner&lt;/code&gt; provides more features, options and isolation support including memory, CPU and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; isolation.&lt;/p&gt;

&lt;h4 id=&quot;is-there-any-simple-hack&quot;&gt;Is there any simple hack?&lt;/h4&gt;

&lt;p&gt;There is a hack to prevent users from launching a shell by setting setting the SHELL of the user or process to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/false&lt;/code&gt;; This will prevent any shell from launching a shell. This can work well with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SystemdSpawner&lt;/code&gt; by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHELL=/usr/false&lt;/code&gt; in the systemd service file. But please remember this is a hack and resourceful developer will be able to find a workaround.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyterhub.readthedocs.io/en/stable/reference/websecurity.html&quot; target=&quot;_blank&quot;&gt;Jupyter Hub Security Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyterlab.readthedocs.io/en/stable/&quot; target=&quot;_blank&quot;&gt;Jupyter Lab Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyterhub-dockerspawner.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot;&gt;Jupyter Hub Docker Spawner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jupyterhub/zero-to-jupyterhub-k8s&quot; target=&quot;_blank&quot;&gt;Zero to Jupyter Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;[]Jupyter Hub Systemd Spawner](https://github.com/jupyterhub/systemdspawner){:target=”_blank”}&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="Jupyter Hub" /><category term="Jupyter Lab" /><summary type="html">Photo by Fiona Jackson</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/jupyter-hub-disable-console-access/no-access.jpg" /><media:content medium="image" url="https://www.achowdhary.com/jupyter-hub-disable-console-access/no-access.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Personal website/blog with Jekyll + Github.</title><link href="https://www.achowdhary.com/jekyll-github-pages-simplified/" rel="alternate" type="text/html" title="Personal website/blog with Jekyll + Github." /><published>2021-02-14T08:58:14+05:30</published><updated>2021-02-14T08:58:14+05:30</updated><id>https://www.achowdhary.com/jekyll-github-pages-simplified</id><content type="html" xml:base="https://www.achowdhary.com/jekyll-github-pages-simplified/">&lt;p&gt;I recently moved my website/blog from wordpress to Jekyll + Github Pages (I am still migrating). I love simplicity of both Jekyll and Gihub, that is the precise reson for the move. Wordpress is still awesome and best CMS, but for a simple website like mine, Jekyll and Github Pages are most efficient and cost effective. Making beautiful static website couldn’t be any cheaper and easier.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;github.jpg&quot; alt=&quot;Github Website&quot; /&gt; 
&lt;/figure&gt;

&lt;p&gt;There are loads of tutorials available online on this topic, so I am not going to get into detailed steps. However we will going  discuss kye concepts, options and tips that will help you in your decisions. I have also provided references to some useful articles on this topic in the end.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;h5 id=&quot;types-of-github-pages&quot;&gt;Types of Github Pages&lt;/h5&gt;
&lt;p&gt;There are three types of &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;GitHub Pages&lt;/a&gt; sites: project, user, and organization. Project sites are connected to a specific project hosted on GitHub, User and organization sites are connected to a specific GitHub account. To publish a user site, you must create a repository owned by your user account that’s named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;. To publish an organization site, you must create a repository owned by an organization that’s named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;organization&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;-special--repositories&quot;&gt;✨ Special ✨ Repositories&lt;/h5&gt;
&lt;p&gt;Repository that maches your username is a special repository in Github. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; in root of default branch of this repository is shown on your gihub profile. If you configure Github pages for this repository, your website will be published at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http(s)://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly repository that maches your orgname is a special repository. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; is shown on Oranization’s gihub profile and github pages website will be published at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http(s)://&amp;lt;organame&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Project sites are available at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http(s)://&amp;lt;username&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http(s)://&amp;lt;organization&amp;gt;.github.io/&amp;lt;repository&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are using a custom domain, you can pubish any repository to desired domain, you do not need to worry about the repository name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;jekyll-website-directory-structure&quot;&gt;Jekyll Website Directory Structure&lt;/h5&gt;
&lt;p&gt;Before you start, please make sure you are familier with &lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot; target=&quot;_blank&quot;&gt;Jekyll direcotry structure&lt;/a&gt; and &lt;a href=&quot;https://www.markdownguide.org/tools/jekyll/&quot; target=&quot;_blank&quot;&gt;Markdown syntax&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;public-vs-private-repo&quot;&gt;Public vs Private Repo&lt;/h5&gt;
&lt;p&gt;If you would like to publish pages from a private repo, you can not do it in a free plan. You need a pro account to publish pages from private repository.&lt;/p&gt;

&lt;h2 id=&quot;create-simple-website-using-gihub-themes&quot;&gt;Create Simple website using Gihub themes&lt;/h2&gt;
&lt;p&gt;You can publish a simple jekyll website in less than an hour just by using Github UI. You won’t even need to install Jekyll or Ruby. Here are steps to create a website and add posts on website with a Github provided theme.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click on settings of your repository.&lt;/li&gt;
  &lt;li&gt;Scroll down to Github Pages section of settings.&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Select a Theme&lt;/code&gt; button.&lt;/li&gt;
  &lt;li&gt;Select a Theme&lt;/li&gt;
  &lt;li&gt;Write content in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file, when prompted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your website with gihub provided theme is now ready. The webiste is published from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch of your repository. If you look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch, you will find two files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yaml&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To add a new post create a folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; and  create a new file called YYYY-MM-DD-NAME-OF-POST.md, replacing YYYY-MM-DD with the date of your post and NAME-OF-POST with the name of your post. Your post is now availabel on your website, the new post will be located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://&amp;lt;username&amp;gt;.github.io/YYYY/MM/DD/NAME-OF-POST.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to add a new page, create a new file for your page called &lt;PAGE-NAME&gt;.md. You need to add special header formatter to specify the url of the page. e.g If you want to create a page `https://&lt;username&gt;.github.io/about/contact-me/` create a page named contact-me.md and add following header config inside the file.&lt;/username&gt;&lt;/PAGE-NAME&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	layout: page
	title: &quot;Contact me&quot;
	permalink: /about/contact-me/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-custom-theme&quot;&gt;Using Custom Theme&lt;/h2&gt;
&lt;p&gt;Building website using custom theme is more involved and takes some time, but is also a lot more rewarding. Github provided themes are very limited and you are not able to customize a selected theme currently.&lt;/p&gt;

&lt;h5 id=&quot;step--1-find-a-theme&quot;&gt;Step # 1: Find a Theme&lt;/h5&gt;
&lt;p&gt;First and the most important part of building your website is finding a suitable theme and  it is also most time consuming task. You can choose to buy a theme or find a free theme, in anycase you will need to spend time finding right theme for you. If you are looking for free themes search inside Github rather than Google.&lt;/p&gt;

&lt;h5 id=&quot;step--2-install-jekyll-locally&quot;&gt;Step # 2: Install Jekyll Locally&lt;/h5&gt;
&lt;p&gt;This might sound simple but a lot of people face problems, specially on Mac OS X. You will need to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rvm&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;,  &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot; target=&quot;_blank&quot;&gt;Installation instructions&lt;/a&gt; on Jekyll website are accurate and concise. Make sure your versions are compatible with &lt;a href=&quot;https://pages.github.com/versions/&quot; target=&quot;_blank&quot;&gt;Github dependency versions&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;step--3-fork-the-theme-repo&quot;&gt;Step # 3: Fork the theme Repo&lt;/h5&gt;
&lt;p&gt;This step is only needed if you selected a free theme from Github, which is very likely. If you fall into this category, please create a fork of repo and rename the repository to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orgname&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project&lt;/code&gt;).&lt;/p&gt;

&lt;h5 id=&quot;step--4-branches-for-your-repo&quot;&gt;Step # 4: Branches for your repo:&lt;/h5&gt;
&lt;p&gt;If this is your  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orgname&lt;/code&gt; repo, I recommend using following branches:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;main&lt;/strong&gt;: Make it default, and this is where I keep README.md for your Github profile.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;: This is where you keep the forked theme from oroginal repo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;website&lt;/strong&gt;: This is where you add/updated your contents e.g pages, posts (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt;), images and configuration (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yaml&lt;/code&gt;). Note that this branch has entire jekyll directory structure but I make changes to only above mentioned items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This structure helps me keep the theme in sync with the orignal repo and also make contributions. If you like to update your website to new version of theme, all you have to do is refresh your master and rebase website branch against master.&lt;/p&gt;

&lt;h5 id=&quot;step--5-add-new-posts--customize&quot;&gt;Step # 5: Add New Posts / Customize&lt;/h5&gt;
&lt;p&gt;Clone tis new repo to you pc/laptop using your repository url e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/{username}/{username}.git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add new posts, pages, modify configuration, add disqus and what not. Test your changes locally and when ready push the changes to github.&lt;/p&gt;

&lt;h5 id=&quot;step--6-configure-github-pagess-in-settings&quot;&gt;Step # 6: Configure Github Pagess in Settings:&lt;/h5&gt;
&lt;p&gt;Click on settings of your repository, Scroll Down to Github Pages section of settings and select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;website&lt;/code&gt; from the branches dropdown.&lt;/p&gt;

&lt;h5 id=&quot;step--5a-and-6a-my-theme-is-not-compatible-with-github-ci&quot;&gt;Step # 5a and 6a: My Theme is not compatible with Github CI.&lt;/h5&gt;
&lt;p&gt;Many great themes are not supported by Github CI due to the dependencies theme use. Don’t discard these themes, there is a very simple and easy work around.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;After you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt;, your static website is generated in a folder named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;. Rename this folder to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docs&lt;/code&gt; and check it in (Yes! check in generated files).&lt;/li&gt;
  &lt;li&gt;In the Github Pages sections of your Github Settings select docs from root folder drop down. You are no longer using using the Github CI, but this shouldn’t matter  as your website is exectly how you wanted it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please remember your final website is only HTML, CSS and Javascript. Every thing else you have in your repo is to help you create that static website. So you can take content in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; and host any anywhere you like, Github tends to be most convenient and familiar place.&lt;/p&gt;

&lt;h2 id=&quot;connect-your-domain-and-enable-ssl&quot;&gt;Connect your domain and enable SSL&lt;/h2&gt;
&lt;p&gt;In Github Pages section of your repository settings you can choose to publish your pages to your domain. If the domain name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_domain.com&lt;/code&gt;, I prefer to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.my_domain.com&lt;/code&gt; in this section. Github pages do not yet support subdomain linking. I think that is unlikely to change anytime soon.&lt;/p&gt;

&lt;p&gt;You will need to update the DNS on your domain provider e.g. goddaddy.&lt;/p&gt;

&lt;p&gt;Github also provides free SSL, I recommend enabling SSL on your website. It takes couple of hours to generate the certficate after you have added a domain name.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/creating-a-github-pages-site-with-jekyll&quot; target=&quot;_blank&quot;&gt;Github docs: Creating Github Site using Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/adding-content-to-your-github-pages-site-using-jekyll&quot; target=&quot;_blank&quot;&gt;Github docs: Add Content to Github Site using Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.markdownguide.org/tools/jekyll/&quot; target=&quot;_blank&quot;&gt;Jekyll Markdown Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot; target=&quot;_blank&quot;&gt;Jekyll Directory Structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ndench.github.io/jekyll/setup-jekyll-on-github-pages&quot; target=&quot;_blank&quot;&gt;A Neat and Concise blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.aleksandrhovhannisyan.com/blog/getting-started-with-jekyll-and-github-pages/&quot; target=&quot;_blank&quot;&gt;A detailed Blog, TLDR;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Anuradha Chowdhary</name><email>anuradha@shoonye.com</email></author><category term="jekyll" /><category term="github" /><category term="website" /><summary type="html">I recently moved my website/blog from wordpress to Jekyll + Github Pages (I am still migrating). I love simplicity of both Jekyll and Gihub, that is the precise reson for the move. Wordpress is still awesome and best CMS, but for a simple website like mine, Jekyll and Github Pages are most efficient and cost effective. Making beautiful static website couldn’t be any cheaper and easier.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.achowdhary.com/airflow-concurrency-simplified/airflow.jpeg" /><media:content medium="image" url="https://www.achowdhary.com/airflow-concurrency-simplified/airflow.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>